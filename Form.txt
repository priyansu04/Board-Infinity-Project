import React, { useState, useEffect, useContext, useRef, useReducer, useCallback, useMemo } from 'react';
import './App.css';

// Theme context
const ThemeContext = React.createContext();

// Reducer function for managing counter state
const counterReducer = (state, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    case 'DECREMENT':
      return { count: state.count - 1 };
    case 'RESET':
      return { count: 0 };
    default:
      return state;
  }
};

// Component to display the counter
const Counter = () => {
  const [state, dispatch] = useReducer(counterReducer, { count: 0 });
  const [theme, setTheme] = useContext(ThemeContext);
  const countRef = useRef(0);

  useEffect(() => {
    console.log('Counter value updated:', state.count);
    countRef.current = state.count;
  }, [state.count]);

  const increment = useCallback(() => {
    dispatch({ type: 'INCREMENT' });
  }, []);

  const decrement = useCallback(() => {
    dispatch({ type: 'DECREMENT' });
  }, []);

  const reset = useCallback(() => {
    dispatch({ type: 'RESET' });
  }, []);

  const memoizedValue = useMemo(() => {
    return countRef.current % 2 === 0 ? 'even' : 'odd';
  }, [state.count]);

  return (
    <div className={`counter ${theme}`}>
      <h2>Counter: {state.count}</h2>
      <p>Count is {memoizedValue}</p>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
};

// Component to toggle theme
const ThemeToggle = () => {
  const [theme, setTheme] = useContext(ThemeContext);

  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

  return (
    <div className="theme-toggle">
      <button onClick={toggleTheme}>Toggle Theme</button>
    </div>
  );
};

// App component
const App = () => {
  const [theme, setTheme] = useState('light');

  return (
    <ThemeContext.Provider value={[theme, setTheme]}>
      <div className="App">
        <h1>React Hooks Counter App</h1>
        <Counter />
        <ThemeToggle />
      </div>
    </ThemeContext.Provider>
  );
};

export default App;
